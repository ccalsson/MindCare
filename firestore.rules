rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function hasValidSubscription(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)/subscriptions/{subscriptionId})
        && get(/databases/$(database)/documents/users/$(userId)/subscriptions/{subscriptionId}).data.isActive == true
        && get(/databases/$(database)/documents/users/$(userId)/subscriptions/{subscriptionId}).data.endDate > request.time;
    }

    match /users/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);

      match /subscriptions/{subscriptionId} {
        allow read: if isOwner(userId);
        allow write: if false; // Solo backend
      }

      match /activity_logs/{logId} {
        allow read: if isOwner(userId);
        allow create: if isOwner(userId);
        allow update, delete: if false;
      }
    }

    match /audio_resources/{resourceId} {
      allow read: if request.auth != null;
      allow write: if false;
    }
    
    match /virtual_sessions/{sessionId} {
      allow read: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         resource.data.professionalId == request.auth.uid);
      allow write: if false;
    }
    
    match /chats/{chatId} {
      allow read: if request.auth != null && 
        resource.data.participants.hasAny([request.auth.uid]);
      allow create: if request.auth != null;
    }
    
    match /premium_content/{contentId} {
      allow read: if isAuthenticated() && hasValidSubscription(request.auth.uid);
      allow write: if false;
    }
    
    match /users/{userId}/analytics/{docId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write: if false;
    }
  }
} 